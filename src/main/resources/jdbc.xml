<?xml version="1.0" encoding="UTF-8"?>
<!--
    Application context definition for PetClinic Datasource.
-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jee="http://www.springframework.org/schema/jee"
       xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context.xsd
         http://www.springframework.org/schema/jdbc
         http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
         http://www.springframework.org/schema/jee
         http://www.springframework.org/schema/jee/spring-jee.xsd">

    <!-- ========================= DATASOURCE DEFINITION ========================= -->

    <!-- Configurer that replaces ${...} placeholders with values from a properties file -->
    <!-- (in this case, JDBC-related settings for the dataSource definition below) -->
    <context:property-placeholder location="classpath:props/jdbc.properties" system-properties-mode="OVERRIDE"/>

    <!-- DataSource configuration for the tomcat jdbc connection pool 
    See here for more details on commons-dbcp versus tomcat-jdbc: 
    http://blog.ippon.fr/2013/03/13/improving-the-performance-of-the-spring-petclinic-sample-application-part-3-of-5/-->
    <bean id="dataSource0" class="org.apache.tomcat.jdbc.pool.DataSource"
          p:driverClassName="${cur.jdbc.driverClassName}" p:url="${cur.jdbc.url}"
          p:username="${cur.jdbc.username}" p:password="${cur.jdbc.password}"/>

    <bean id="dataSourceParent" abstract="true" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="filters" value="stat" />
        <property name="maxActive" value="20" />
        <property name="initialSize" value="1" />
        <property name="maxWait" value="60000" />
        <property name="minIdle" value="1" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="poolPreparedStatements" value="true" />
        <property name="maxOpenPreparedStatements" value="20" />
        <property name="asyncInit" value="true" />
    </bean>

    <bean id="curDataSource" parent="dataSourceParent" primary="true">
        <property name="driverClassName" value="${cur.jdbc.driverClassName}" />
        <property name="url" value="${cur.jdbc.url}" />
        <property name="username" value="${cur.jdbc.username}" />
        <property name="password" value="${cur.jdbc.password}" />
    </bean>

    <bean id="hisDataSource" parent="dataSourceParent">
        <property name="driverClassName" value="${his.jdbc.driverClassName}" />
        <property name="url" value="${his.jdbc.url}" />
        <property name="username" value="${his.jdbc.username}" />
        <property name="password" value="${his.jdbc.password}" />
    </bean>

    <bean id="dataSourceSwitcher" class="com.robatter.app.migrate.manager.ThreadLocalRountingDataSource">
        <property name="targetDataSources">
            <map>
                <entry key="curDataSource" value-ref="curDataSource"/>
                <entry key="hisDataSource" value-ref="hisDataSource"/>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="curDataSource"/>
    </bean>


    <!-- 事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceSwitcher"/>
    </bean>

    <!-- 配置AOP通知 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 配置事务属性 -->
        <tx:attributes>
            <!-- 添加事务管理的方法 -->
            <tx:method name="save*" propagation="REQUIRED"/>
            <tx:method name="delete*" propagation="REQUIRED"/>
            <tx:method name="update*" propagation="REQUIRED"/>
            <tx:method name="select*" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!-- 配置AOP，为添加事务管理的操作配置AOP -->
    <aop:config>
        <!-- 引入的Spring定义的事务通知，需要使用aop:advisor -->
        <!-- 下面难 -->
        <aop:advisor advice-ref="txAdvice"  pointcut="execution(* com.robatter.app.migrate.service.*.*(..))" />
    </aop:config>

    <bean id="curJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="curDataSource"/>
    </bean>

    <bean id="hisJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="hisDataSource"/>
    </bean>
</beans>
